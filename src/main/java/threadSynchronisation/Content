##
Code the Synchronisation demo and showcase the fault
    -> [Code the Synchronisation demo without fix]
    -> [Run the code and show the inconsistency]
Tell about the issue
    -> Non Atomic operation being handled by more than one threads
    -> How does addition operation work
    -> With the above example, introduce race condition
    -> How can we avoid this race condition?
    -> Natural solution is allow only one thread to work on the shared resource at a time
    -> Introduce critical section
    -> What are the ways to create the critical section?
    -> Usage of synchronised keyword
    -> Implement the solution with synchronisation


##
Issues with synchronisation





|> -- Synchronisation -- <|
-> Race condition


|> -- Synchronisation Issues & Considerations <|


|> -- Locking with custom objects -- <|


|> -- Wait & Notify -- <|


|> -- Difference between wait & sleep -- <|


|> -- Producer & Consumer --<|


|>-- Thread Memory Model --<|
-> Threads are lightweight processes
   > Threads of the same process run in a shared memory space which is shared with the process
   > Processes run in a separate memory space

-> Two types of Memory Space
   > Stack Space : Local variables, method arguments, methods calls, etc are stored here
   > Heap Space : Objects are stored in this space, and they are stored as long as they being referenced somewhere

-> Every thread has its own Stack space, but all threads share the Heap memory of the process (under which they are created)
   > Since the memory space is shared between threads, synchronisation becomes very important!

